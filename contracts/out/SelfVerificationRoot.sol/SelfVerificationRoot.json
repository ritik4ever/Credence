{"abi":[{"type":"function","name":"getConfigId","inputs":[{"name":"destinationChainId","type":"bytes32","internalType":"bytes32"},{"name":"userIdentifier","type":"bytes32","internalType":"bytes32"},{"name":"userDefinedData","type":"bytes","internalType":"bytes"}],"outputs":[{"name":"","type":"bytes32","internalType":"bytes32"}],"stateMutability":"view"},{"type":"function","name":"onVerificationSuccess","inputs":[{"name":"output","type":"bytes","internalType":"bytes"},{"name":"userData","type":"bytes","internalType":"bytes"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"scope","inputs":[],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"verifySelfProof","inputs":[{"name":"proofPayload","type":"bytes","internalType":"bytes"},{"name":"userContextData","type":"bytes","internalType":"bytes"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"event","name":"ScopeUpdated","inputs":[{"name":"newScope","type":"uint256","indexed":true,"internalType":"uint256"}],"anonymous":false},{"type":"error","name":"InvalidDataFormat","inputs":[]},{"type":"error","name":"UnauthorizedCaller","inputs":[]}],"bytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"deployedBytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"methodIdentifiers":{"getConfigId(bytes32,bytes32,bytes)":"ada1b319","onVerificationSuccess(bytes,bytes)":"8d2d8d6a","scope()":"6e62d0a8","verifySelfProof(bytes,bytes)":"d161802b"},"rawMetadata":"{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"InvalidDataFormat\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UnauthorizedCaller\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"newScope\",\"type\":\"uint256\"}],\"name\":\"ScopeUpdated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"destinationChainId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"userIdentifier\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"userDefinedData\",\"type\":\"bytes\"}],\"name\":\"getConfigId\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"output\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"userData\",\"type\":\"bytes\"}],\"name\":\"onVerificationSuccess\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"scope\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"proofPayload\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"userContextData\",\"type\":\"bytes\"}],\"name\":\"verifySelfProof\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Self Team\",\"details\":\"Provides base functionality for verifying and disclosing identity credentials\",\"errors\":{\"InvalidDataFormat()\":[{\"details\":\"Triggered when the provided bytes data doesn't have the expected format\"}],\"UnauthorizedCaller()\":[{\"details\":\"Only the identity verification hub V2 contract can call onVerificationSuccess\"}]},\"events\":{\"ScopeUpdated(uint256)\":{\"params\":{\"newScope\":\"The new scope value that was set\"}}},\"kind\":\"dev\",\"methods\":{\"constructor\":{\"details\":\"Sets up the immutable reference to the hub contract and initial scope\",\"params\":{\"identityVerificationHubV2Address\":\"The address of the Identity Verification Hub V2\",\"scopeValue\":\"The expected proof scope for user registration\"}},\"getConfigId(bytes32,bytes32,bytes)\":{\"details\":\"This function should be overridden by the implementing contract to provide custom configId logic\",\"params\":{\"destinationChainId\":\"The destination chain ID\",\"userDefinedData\":\"The user defined data\",\"userIdentifier\":\"The user identifier\"},\"returns\":{\"_0\":\"The configId\"}},\"onVerificationSuccess(bytes,bytes)\":{\"custom:flow\":\"This function decodes the output and calls the customizable verification hook\",\"custom:security\":\"Only the authorized hub contract can call this function\",\"details\":\"Only callable by the identity verification hub V2 contract for security\",\"params\":{\"output\":\"The verification output data containing disclosed identity information\",\"userData\":\"The user-defined data passed through the verification process\"}},\"scope()\":{\"details\":\"Public view function to access the current scope setting\",\"returns\":{\"_0\":\"The scope value that proofs must match\"}},\"verifySelfProof(bytes,bytes)\":{\"custom:data-format\":\"proofPayload = | 32 bytes attestationId | proofData |userContextData = | 32 bytes destChainId | 32 bytes userIdentifier | data |hubData = | 1 bytes contract version | 31 bytes buffer | 32 bytes scope | 32 bytes attestationId | proofData |\",\"details\":\"Parses relayer data format and validates against contract settings before calling hub V2\",\"params\":{\"proofPayload\":\"Packed data from relayer in format: | 32 bytes attestationId | proof data |\",\"userContextData\":\"User-defined data in format: | 32 bytes destChainId | 32 bytes userIdentifier | data |\"}}},\"stateVariables\":{\"CONTRACT_VERSION\":{\"details\":\"This version is included in the hub data for protocol compatibility\"},\"_identityVerificationHubV2\":{\"details\":\"Immutable reference used for bytes-based proof verification\"},\"_scope\":{\"details\":\"Used to validate that submitted proofs match the expected scope\"}},\"title\":\"SelfVerificationRoot\",\"version\":1},\"userdoc\":{\"errors\":{\"InvalidDataFormat()\":[{\"notice\":\"Error thrown when the data format is invalid\"}],\"UnauthorizedCaller()\":[{\"notice\":\"Error thrown when onVerificationSuccess is called by an unauthorized address\"}]},\"events\":{\"ScopeUpdated(uint256)\":{\"notice\":\"Emitted when the scope is updated\"}},\"kind\":\"user\",\"methods\":{\"constructor\":{\"notice\":\"Initializes the SelfVerificationRoot contract\"},\"getConfigId(bytes32,bytes32,bytes)\":{\"notice\":\"Generates a configId for the user\"},\"onVerificationSuccess(bytes,bytes)\":{\"notice\":\"Callback function called upon successful verification by the hub contract\"},\"scope()\":{\"notice\":\"Returns the current scope value\"},\"verifySelfProof(bytes,bytes)\":{\"notice\":\"Verifies a self-proof using the bytes-based interface\"}},\"notice\":\"Abstract base contract to be integrated with self's verification infrastructure\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"lib/self/contracts/contracts/abstract/SelfVerificationRoot.sol\":\"SelfVerificationRoot\"},\"evmVersion\":\"prague\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/\",\":@selfxyz/contracts/=lib/self/contracts/\",\":erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":halmos-cheatcodes/=lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":self/=lib/self/\"],\"viaIR\":true},\"sources\":{\"lib/self/contracts/contracts/abstract/SelfVerificationRoot.sol\":{\"keccak256\":\"0x782797a99d2f655a4cadb423e348a2fc8bc0fffb0a9aa599dbc1ab18d112e092\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://a9253025e7d6eee3ddb6893ac502eee0668b59115f58eb15e4912ae2b21437d3\",\"dweb:/ipfs/QmZDRRp8cZfsMVEoXJkVGeQcrpgXnmTJu1XacgtPX88Gi1\"]},\"lib/self/contracts/contracts/constants/AttestationId.sol\":{\"keccak256\":\"0xc86e1a319db6841e752c9fb9cf03fa6904c67fa0be7a887c4924ad8fba7b35d1\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://99972aef813d27f8176b454a2b8c1c2119840fe2b95f22f66464904967b1b2f6\",\"dweb:/ipfs/QmdDSe6UYc1aYrPPruwYtbTxiM4oVuyVvE9uKiK7koZhm9\"]},\"lib/self/contracts/contracts/constants/CircuitConstantsV2.sol\":{\"keccak256\":\"0x85988897f60f3b291e572868aab05b6b267f9a684c448743a69a0e6142b5df88\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://d6ccb5c5639bb4996e8fa5cf8fbd70478349569d7819fbd36db44dcf443626f0\",\"dweb:/ipfs/QmafejNq5aecMvATugWdzDkZfkbSdahdUTWSi7Y4YEggys\"]},\"lib/self/contracts/contracts/interfaces/IDscCircuitVerifier.sol\":{\"keccak256\":\"0x3fe45bb4dfaa288399ac7f2a2f3a096954620dc6da667e1a561e14544f338d1b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://dcef8babd319e9f8c4bf9bb3d3a9a26e354930a8c9770108aee4b90a7d7ee5c7\",\"dweb:/ipfs/QmPjuwyui7NS2HcaYYY5ETXBstVv48pD1ofdBwGawrXKcg\"]},\"lib/self/contracts/contracts/interfaces/IIdentityVerificationHubV2.sol\":{\"keccak256\":\"0x29364427abebd67d3574083e9be92d650471562e60ffbcfdb2c39bc529a26f21\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f7a1f076ac83f1eb6c19ea932827b604d16436b9317290eef2e36f46f8c1677c\",\"dweb:/ipfs/QmcEwf4kirokU4pWZAnJmxLfWXnVeBbs2EMkMZCffD6eGt\"]},\"lib/self/contracts/contracts/interfaces/IRegisterCircuitVerifier.sol\":{\"keccak256\":\"0x79cc50c0de8294f79811e2a878fe07a3f4ac83ed135a10af8c974a89615b7f3b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c5f3b3e5ec9dbbcd0a15621a33abb363875d1ecf3e46fb2d8371cc332d0f5992\",\"dweb:/ipfs/Qmb15d6ktr9tMiw9o3p79Cugws549MZArS5DCUsvTDkpTn\"]},\"lib/self/contracts/contracts/interfaces/ISelfVerificationRoot.sol\":{\"keccak256\":\"0x6728f20379d83a0e80c684a037a1f576044f7c7fff6a88e2adc2c631224be78f\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://dec4fddb761d0e4ead28223ffa410d773c117a82d5bf5413f0ac2b79e91730f8\",\"dweb:/ipfs/QmXaQx7JWEq5ZPJFsXeMNBVPjewdcXDF566JYayHHBqd5Y\"]},\"lib/self/contracts/contracts/libraries/SelfStructs.sol\":{\"keccak256\":\"0x97dfa385760cf967586b0e39ec7c00475649946d5983950c12923a8298f4e0f7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://d5e695bd0636948177b4e851066435b59c2f6d6a95ca43f289f16047b8f5fcca\",\"dweb:/ipfs/QmaLKxhF8FPwbekjTzv515u8EfYHcqDMoNeFRrAiSUfrq7\"]}},\"version\":1}","metadata":{"compiler":{"version":"0.8.28+commit.7893614a"},"language":"Solidity","output":{"abi":[{"inputs":[],"type":"error","name":"InvalidDataFormat"},{"inputs":[],"type":"error","name":"UnauthorizedCaller"},{"inputs":[{"internalType":"uint256","name":"newScope","type":"uint256","indexed":true}],"type":"event","name":"ScopeUpdated","anonymous":false},{"inputs":[{"internalType":"bytes32","name":"destinationChainId","type":"bytes32"},{"internalType":"bytes32","name":"userIdentifier","type":"bytes32"},{"internalType":"bytes","name":"userDefinedData","type":"bytes"}],"stateMutability":"view","type":"function","name":"getConfigId","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}]},{"inputs":[{"internalType":"bytes","name":"output","type":"bytes"},{"internalType":"bytes","name":"userData","type":"bytes"}],"stateMutability":"nonpayable","type":"function","name":"onVerificationSuccess"},{"inputs":[],"stateMutability":"view","type":"function","name":"scope","outputs":[{"internalType":"uint256","name":"","type":"uint256"}]},{"inputs":[{"internalType":"bytes","name":"proofPayload","type":"bytes"},{"internalType":"bytes","name":"userContextData","type":"bytes"}],"stateMutability":"nonpayable","type":"function","name":"verifySelfProof"}],"devdoc":{"kind":"dev","methods":{"constructor":{"details":"Sets up the immutable reference to the hub contract and initial scope","params":{"identityVerificationHubV2Address":"The address of the Identity Verification Hub V2","scopeValue":"The expected proof scope for user registration"}},"getConfigId(bytes32,bytes32,bytes)":{"details":"This function should be overridden by the implementing contract to provide custom configId logic","params":{"destinationChainId":"The destination chain ID","userDefinedData":"The user defined data","userIdentifier":"The user identifier"},"returns":{"_0":"The configId"}},"onVerificationSuccess(bytes,bytes)":{"custom:flow":"This function decodes the output and calls the customizable verification hook","custom:security":"Only the authorized hub contract can call this function","details":"Only callable by the identity verification hub V2 contract for security","params":{"output":"The verification output data containing disclosed identity information","userData":"The user-defined data passed through the verification process"}},"scope()":{"details":"Public view function to access the current scope setting","returns":{"_0":"The scope value that proofs must match"}},"verifySelfProof(bytes,bytes)":{"custom:data-format":"proofPayload = | 32 bytes attestationId | proofData |userContextData = | 32 bytes destChainId | 32 bytes userIdentifier | data |hubData = | 1 bytes contract version | 31 bytes buffer | 32 bytes scope | 32 bytes attestationId | proofData |","details":"Parses relayer data format and validates against contract settings before calling hub V2","params":{"proofPayload":"Packed data from relayer in format: | 32 bytes attestationId | proof data |","userContextData":"User-defined data in format: | 32 bytes destChainId | 32 bytes userIdentifier | data |"}}},"version":1},"userdoc":{"kind":"user","methods":{"constructor":{"notice":"Initializes the SelfVerificationRoot contract"},"getConfigId(bytes32,bytes32,bytes)":{"notice":"Generates a configId for the user"},"onVerificationSuccess(bytes,bytes)":{"notice":"Callback function called upon successful verification by the hub contract"},"scope()":{"notice":"Returns the current scope value"},"verifySelfProof(bytes,bytes)":{"notice":"Verifies a self-proof using the bytes-based interface"}},"version":1}},"settings":{"remappings":["@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/","@selfxyz/contracts/=lib/self/contracts/","erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/","forge-std/=lib/forge-std/src/","halmos-cheatcodes/=lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/","openzeppelin-contracts/=lib/openzeppelin-contracts/","self/=lib/self/"],"optimizer":{"enabled":true,"runs":200},"metadata":{"bytecodeHash":"ipfs"},"compilationTarget":{"lib/self/contracts/contracts/abstract/SelfVerificationRoot.sol":"SelfVerificationRoot"},"evmVersion":"prague","libraries":{},"viaIR":true},"sources":{"lib/self/contracts/contracts/abstract/SelfVerificationRoot.sol":{"keccak256":"0x782797a99d2f655a4cadb423e348a2fc8bc0fffb0a9aa599dbc1ab18d112e092","urls":["bzz-raw://a9253025e7d6eee3ddb6893ac502eee0668b59115f58eb15e4912ae2b21437d3","dweb:/ipfs/QmZDRRp8cZfsMVEoXJkVGeQcrpgXnmTJu1XacgtPX88Gi1"],"license":"MIT"},"lib/self/contracts/contracts/constants/AttestationId.sol":{"keccak256":"0xc86e1a319db6841e752c9fb9cf03fa6904c67fa0be7a887c4924ad8fba7b35d1","urls":["bzz-raw://99972aef813d27f8176b454a2b8c1c2119840fe2b95f22f66464904967b1b2f6","dweb:/ipfs/QmdDSe6UYc1aYrPPruwYtbTxiM4oVuyVvE9uKiK7koZhm9"],"license":"MIT"},"lib/self/contracts/contracts/constants/CircuitConstantsV2.sol":{"keccak256":"0x85988897f60f3b291e572868aab05b6b267f9a684c448743a69a0e6142b5df88","urls":["bzz-raw://d6ccb5c5639bb4996e8fa5cf8fbd70478349569d7819fbd36db44dcf443626f0","dweb:/ipfs/QmafejNq5aecMvATugWdzDkZfkbSdahdUTWSi7Y4YEggys"],"license":"MIT"},"lib/self/contracts/contracts/interfaces/IDscCircuitVerifier.sol":{"keccak256":"0x3fe45bb4dfaa288399ac7f2a2f3a096954620dc6da667e1a561e14544f338d1b","urls":["bzz-raw://dcef8babd319e9f8c4bf9bb3d3a9a26e354930a8c9770108aee4b90a7d7ee5c7","dweb:/ipfs/QmPjuwyui7NS2HcaYYY5ETXBstVv48pD1ofdBwGawrXKcg"],"license":"MIT"},"lib/self/contracts/contracts/interfaces/IIdentityVerificationHubV2.sol":{"keccak256":"0x29364427abebd67d3574083e9be92d650471562e60ffbcfdb2c39bc529a26f21","urls":["bzz-raw://f7a1f076ac83f1eb6c19ea932827b604d16436b9317290eef2e36f46f8c1677c","dweb:/ipfs/QmcEwf4kirokU4pWZAnJmxLfWXnVeBbs2EMkMZCffD6eGt"],"license":"MIT"},"lib/self/contracts/contracts/interfaces/IRegisterCircuitVerifier.sol":{"keccak256":"0x79cc50c0de8294f79811e2a878fe07a3f4ac83ed135a10af8c974a89615b7f3b","urls":["bzz-raw://c5f3b3e5ec9dbbcd0a15621a33abb363875d1ecf3e46fb2d8371cc332d0f5992","dweb:/ipfs/Qmb15d6ktr9tMiw9o3p79Cugws549MZArS5DCUsvTDkpTn"],"license":"MIT"},"lib/self/contracts/contracts/interfaces/ISelfVerificationRoot.sol":{"keccak256":"0x6728f20379d83a0e80c684a037a1f576044f7c7fff6a88e2adc2c631224be78f","urls":["bzz-raw://dec4fddb761d0e4ead28223ffa410d773c117a82d5bf5413f0ac2b79e91730f8","dweb:/ipfs/QmXaQx7JWEq5ZPJFsXeMNBVPjewdcXDF566JYayHHBqd5Y"],"license":"MIT"},"lib/self/contracts/contracts/libraries/SelfStructs.sol":{"keccak256":"0x97dfa385760cf967586b0e39ec7c00475649946d5983950c12923a8298f4e0f7","urls":["bzz-raw://d5e695bd0636948177b4e851066435b59c2f6d6a95ca43f289f16047b8f5fcca","dweb:/ipfs/QmaLKxhF8FPwbekjTzv515u8EfYHcqDMoNeFRrAiSUfrq7"],"license":"MIT"}},"version":1},"id":3}