{"abi":[{"type":"function","name":"batchUpdateDscCircuitVerifiers","inputs":[{"name":"attestationIds","type":"bytes32[]","internalType":"bytes32[]"},{"name":"typeIds","type":"uint256[]","internalType":"uint256[]"},{"name":"verifierAddresses","type":"address[]","internalType":"address[]"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"batchUpdateRegisterCircuitVerifiers","inputs":[{"name":"attestationIds","type":"bytes32[]","internalType":"bytes32[]"},{"name":"typeIds","type":"uint256[]","internalType":"uint256[]"},{"name":"verifierAddresses","type":"address[]","internalType":"address[]"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"discloseVerifier","inputs":[{"name":"attestationId","type":"bytes32","internalType":"bytes32"}],"outputs":[{"name":"","type":"address","internalType":"address"}],"stateMutability":"view"},{"type":"function","name":"dscCircuitVerifiers","inputs":[{"name":"attestationId","type":"bytes32","internalType":"bytes32"},{"name":"typeId","type":"uint256","internalType":"uint256"}],"outputs":[{"name":"","type":"address","internalType":"address"}],"stateMutability":"view"},{"type":"function","name":"generateConfigId","inputs":[{"name":"config","type":"tuple","internalType":"struct SelfStructs.VerificationConfigV2","components":[{"name":"olderThanEnabled","type":"bool","internalType":"bool"},{"name":"olderThan","type":"uint256","internalType":"uint256"},{"name":"forbiddenCountriesEnabled","type":"bool","internalType":"bool"},{"name":"forbiddenCountriesListPacked","type":"uint256[4]","internalType":"uint256[4]"},{"name":"ofacEnabled","type":"bool[3]","internalType":"bool[3]"}]}],"outputs":[{"name":"","type":"bytes32","internalType":"bytes32"}],"stateMutability":"pure"},{"type":"function","name":"getIdentityCommitmentMerkleRoot","inputs":[{"name":"attestationId","type":"bytes32","internalType":"bytes32"}],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"registerCircuitVerifiers","inputs":[{"name":"attestationId","type":"bytes32","internalType":"bytes32"},{"name":"typeId","type":"uint256","internalType":"uint256"}],"outputs":[{"name":"","type":"address","internalType":"address"}],"stateMutability":"view"},{"type":"function","name":"registerCommitment","inputs":[{"name":"attestationId","type":"bytes32","internalType":"bytes32"},{"name":"registerCircuitVerifierId","type":"uint256","internalType":"uint256"},{"name":"registerCircuitProof","type":"tuple","internalType":"struct IRegisterCircuitVerifier.RegisterCircuitProof","components":[{"name":"a","type":"uint256[2]","internalType":"uint256[2]"},{"name":"b","type":"uint256[2][2]","internalType":"uint256[2][2]"},{"name":"c","type":"uint256[2]","internalType":"uint256[2]"},{"name":"pubSignals","type":"uint256[3]","internalType":"uint256[3]"}]}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"registerDscKeyCommitment","inputs":[{"name":"attestationId","type":"bytes32","internalType":"bytes32"},{"name":"dscCircuitVerifierId","type":"uint256","internalType":"uint256"},{"name":"dscCircuitProof","type":"tuple","internalType":"struct IDscCircuitVerifier.DscCircuitProof","components":[{"name":"a","type":"uint256[2]","internalType":"uint256[2]"},{"name":"b","type":"uint256[2][2]","internalType":"uint256[2][2]"},{"name":"c","type":"uint256[2]","internalType":"uint256[2]"},{"name":"pubSignals","type":"uint256[2]","internalType":"uint256[2]"}]}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"registry","inputs":[{"name":"attestationId","type":"bytes32","internalType":"bytes32"}],"outputs":[{"name":"","type":"address","internalType":"address"}],"stateMutability":"view"},{"type":"function","name":"rootTimestamp","inputs":[{"name":"attestationId","type":"bytes32","internalType":"bytes32"},{"name":"root","type":"uint256","internalType":"uint256"}],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"setVerificationConfigV2","inputs":[{"name":"config","type":"tuple","internalType":"struct SelfStructs.VerificationConfigV2","components":[{"name":"olderThanEnabled","type":"bool","internalType":"bool"},{"name":"olderThan","type":"uint256","internalType":"uint256"},{"name":"forbiddenCountriesEnabled","type":"bool","internalType":"bool"},{"name":"forbiddenCountriesListPacked","type":"uint256[4]","internalType":"uint256[4]"},{"name":"ofacEnabled","type":"bool[3]","internalType":"bool[3]"}]}],"outputs":[{"name":"configId","type":"bytes32","internalType":"bytes32"}],"stateMutability":"nonpayable"},{"type":"function","name":"updateDscVerifier","inputs":[{"name":"attestationId","type":"bytes32","internalType":"bytes32"},{"name":"typeId","type":"uint256","internalType":"uint256"},{"name":"verifierAddress","type":"address","internalType":"address"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"updateRegisterCircuitVerifier","inputs":[{"name":"attestationId","type":"bytes32","internalType":"bytes32"},{"name":"typeId","type":"uint256","internalType":"uint256"},{"name":"verifierAddress","type":"address","internalType":"address"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"updateRegistry","inputs":[{"name":"attestationId","type":"bytes32","internalType":"bytes32"},{"name":"registryAddress","type":"address","internalType":"address"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"updateVcAndDiscloseCircuit","inputs":[{"name":"attestationId","type":"bytes32","internalType":"bytes32"},{"name":"vcAndDiscloseCircuitVerifierAddress","type":"address","internalType":"address"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"verificationConfigV2Exists","inputs":[{"name":"configId","type":"bytes32","internalType":"bytes32"}],"outputs":[{"name":"exists","type":"bool","internalType":"bool"}],"stateMutability":"view"},{"type":"function","name":"verify","inputs":[{"name":"baseVerificationInput","type":"bytes","internalType":"bytes"},{"name":"userContextData","type":"bytes","internalType":"bytes"}],"outputs":[],"stateMutability":"nonpayable"}],"bytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"deployedBytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"methodIdentifiers":{"batchUpdateDscCircuitVerifiers(bytes32[],uint256[],address[])":"2d053328","batchUpdateRegisterCircuitVerifiers(bytes32[],uint256[],address[])":"54ff2371","discloseVerifier(bytes32)":"ab15be08","dscCircuitVerifiers(bytes32,uint256)":"ca56259e","generateConfigId((bool,uint256,bool,uint256[4],bool[3]))":"a1cbb9fd","getIdentityCommitmentMerkleRoot(bytes32)":"8829b090","registerCircuitVerifiers(bytes32,uint256)":"ab9ddbfc","registerCommitment(bytes32,uint256,(uint256[2],uint256[2][2],uint256[2],uint256[3]))":"8846ec42","registerDscKeyCommitment(bytes32,uint256,(uint256[2],uint256[2][2],uint256[2],uint256[2]))":"8322963f","registry(bytes32)":"7ef50298","rootTimestamp(bytes32,uint256)":"678c09dd","setVerificationConfigV2((bool,uint256,bool,uint256[4],bool[3]))":"09ddb091","updateDscVerifier(bytes32,uint256,address)":"d88e6a15","updateRegisterCircuitVerifier(bytes32,uint256,address)":"34c14589","updateRegistry(bytes32,address)":"1f299c1a","updateVcAndDiscloseCircuit(bytes32,address)":"9ffc9aea","verificationConfigV2Exists(bytes32)":"2e9c365e","verify(bytes,bytes)":"f7e83aee"},"rawMetadata":"{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"attestationIds\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint256[]\",\"name\":\"typeIds\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"verifierAddresses\",\"type\":\"address[]\"}],\"name\":\"batchUpdateDscCircuitVerifiers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"attestationIds\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint256[]\",\"name\":\"typeIds\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"verifierAddresses\",\"type\":\"address[]\"}],\"name\":\"batchUpdateRegisterCircuitVerifiers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"attestationId\",\"type\":\"bytes32\"}],\"name\":\"discloseVerifier\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"attestationId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"typeId\",\"type\":\"uint256\"}],\"name\":\"dscCircuitVerifiers\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"olderThanEnabled\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"olderThan\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"forbiddenCountriesEnabled\",\"type\":\"bool\"},{\"internalType\":\"uint256[4]\",\"name\":\"forbiddenCountriesListPacked\",\"type\":\"uint256[4]\"},{\"internalType\":\"bool[3]\",\"name\":\"ofacEnabled\",\"type\":\"bool[3]\"}],\"internalType\":\"struct SelfStructs.VerificationConfigV2\",\"name\":\"config\",\"type\":\"tuple\"}],\"name\":\"generateConfigId\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"attestationId\",\"type\":\"bytes32\"}],\"name\":\"getIdentityCommitmentMerkleRoot\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"attestationId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"typeId\",\"type\":\"uint256\"}],\"name\":\"registerCircuitVerifiers\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"attestationId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"registerCircuitVerifierId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256[2]\",\"name\":\"a\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[2][2]\",\"name\":\"b\",\"type\":\"uint256[2][2]\"},{\"internalType\":\"uint256[2]\",\"name\":\"c\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[3]\",\"name\":\"pubSignals\",\"type\":\"uint256[3]\"}],\"internalType\":\"struct IRegisterCircuitVerifier.RegisterCircuitProof\",\"name\":\"registerCircuitProof\",\"type\":\"tuple\"}],\"name\":\"registerCommitment\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"attestationId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"dscCircuitVerifierId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256[2]\",\"name\":\"a\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[2][2]\",\"name\":\"b\",\"type\":\"uint256[2][2]\"},{\"internalType\":\"uint256[2]\",\"name\":\"c\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[2]\",\"name\":\"pubSignals\",\"type\":\"uint256[2]\"}],\"internalType\":\"struct IDscCircuitVerifier.DscCircuitProof\",\"name\":\"dscCircuitProof\",\"type\":\"tuple\"}],\"name\":\"registerDscKeyCommitment\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"attestationId\",\"type\":\"bytes32\"}],\"name\":\"registry\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"attestationId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"root\",\"type\":\"uint256\"}],\"name\":\"rootTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"olderThanEnabled\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"olderThan\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"forbiddenCountriesEnabled\",\"type\":\"bool\"},{\"internalType\":\"uint256[4]\",\"name\":\"forbiddenCountriesListPacked\",\"type\":\"uint256[4]\"},{\"internalType\":\"bool[3]\",\"name\":\"ofacEnabled\",\"type\":\"bool[3]\"}],\"internalType\":\"struct SelfStructs.VerificationConfigV2\",\"name\":\"config\",\"type\":\"tuple\"}],\"name\":\"setVerificationConfigV2\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"configId\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"attestationId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"typeId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"verifierAddress\",\"type\":\"address\"}],\"name\":\"updateDscVerifier\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"attestationId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"typeId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"verifierAddress\",\"type\":\"address\"}],\"name\":\"updateRegisterCircuitVerifier\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"attestationId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"registryAddress\",\"type\":\"address\"}],\"name\":\"updateRegistry\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"attestationId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"vcAndDiscloseCircuitVerifierAddress\",\"type\":\"address\"}],\"name\":\"updateVcAndDiscloseCircuit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"configId\",\"type\":\"bytes32\"}],\"name\":\"verificationConfigV2Exists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"exists\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"baseVerificationInput\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"userContextData\",\"type\":\"bytes\"}],\"name\":\"verify\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Defines all external and public functions from IdentityVerificationHubImplV2.\",\"kind\":\"dev\",\"methods\":{\"batchUpdateDscCircuitVerifiers(bytes32[],uint256[],address[])\":{\"params\":{\"attestationIds\":\"An array of attestation identifiers.\",\"typeIds\":\"An array of signature type identifiers.\",\"verifierAddresses\":\"An array of new DSC circuit verifier addresses.\"}},\"batchUpdateRegisterCircuitVerifiers(bytes32[],uint256[],address[])\":{\"params\":{\"attestationIds\":\"An array of attestation identifiers.\",\"typeIds\":\"An array of signature type identifiers.\",\"verifierAddresses\":\"An array of new register circuit verifier addresses.\"}},\"discloseVerifier(bytes32)\":{\"params\":{\"attestationId\":\"The attestation ID to query.\"},\"returns\":{\"_0\":\"The disclose verifier address associated with the attestation ID.\"}},\"dscCircuitVerifiers(bytes32,uint256)\":{\"params\":{\"attestationId\":\"The attestation ID to query.\",\"typeId\":\"The type ID to query.\"},\"returns\":{\"_0\":\"The DSC circuit verifier address associated with the attestation ID and type ID.\"}},\"generateConfigId((bool,uint256,bool,uint256[4],bool[3]))\":{\"params\":{\"config\":\"The verification configuration\"},\"returns\":{\"_0\":\"The generated config ID (sha256 hash of encoded config)\"}},\"getIdentityCommitmentMerkleRoot(bytes32)\":{\"params\":{\"attestationId\":\"The attestation ID to query.\"},\"returns\":{\"_0\":\"The identity commitment merkle root associated with the attestation ID.\"}},\"registerCircuitVerifiers(bytes32,uint256)\":{\"params\":{\"attestationId\":\"The attestation ID to query.\",\"typeId\":\"The type ID to query.\"},\"returns\":{\"_0\":\"The register circuit verifier address associated with the attestation ID and type ID.\"}},\"registerCommitment(bytes32,uint256,(uint256[2],uint256[2][2],uint256[2],uint256[3]))\":{\"details\":\"Verifies the register circuit proof and then calls the Identity Registry to register the commitment.\",\"params\":{\"attestationId\":\"The attestation ID.\",\"registerCircuitProof\":\"The register circuit proof data.\",\"registerCircuitVerifierId\":\"The identifier for the register circuit verifier to use.\"}},\"registerDscKeyCommitment(bytes32,uint256,(uint256[2],uint256[2][2],uint256[2],uint256[2]))\":{\"details\":\"Verifies the DSC proof and then calls the Identity Registry to register the dsc key commitment.\",\"params\":{\"attestationId\":\"The attestation ID.\",\"dscCircuitProof\":\"The DSC circuit proof data.\",\"dscCircuitVerifierId\":\"The identifier for the DSC circuit verifier to use.\"}},\"registry(bytes32)\":{\"params\":{\"attestationId\":\"The attestation ID to query.\"},\"returns\":{\"_0\":\"The registry address associated with the attestation ID.\"}},\"rootTimestamp(bytes32,uint256)\":{\"params\":{\"attestationId\":\"The attestation ID to query.\",\"root\":\"The merkle root to query.\"},\"returns\":{\"_0\":\"The merkle root timestamp associated with the attestation ID and root.\"}},\"setVerificationConfigV2((bool,uint256,bool,uint256[4],bool[3]))\":{\"details\":\"The configId is automatically generated from the config content using sha256(abi.encode(config))\",\"params\":{\"config\":\"The verification configuration\"},\"returns\":{\"configId\":\"The generated config ID\"}},\"updateDscVerifier(bytes32,uint256,address)\":{\"params\":{\"attestationId\":\"The attestation identifier.\",\"typeId\":\"The signature type identifier.\",\"verifierAddress\":\"The new DSC circuit verifier address.\"}},\"updateRegisterCircuitVerifier(bytes32,uint256,address)\":{\"params\":{\"attestationId\":\"The attestation identifier.\",\"typeId\":\"The signature type identifier.\",\"verifierAddress\":\"The new register circuit verifier address.\"}},\"updateRegistry(bytes32,address)\":{\"params\":{\"attestationId\":\"The attestation ID.\",\"registryAddress\":\"The new registry address.\"}},\"updateVcAndDiscloseCircuit(bytes32,address)\":{\"params\":{\"attestationId\":\"The attestation ID.\",\"vcAndDiscloseCircuitVerifierAddress\":\"The new VC and Disclose circuit verifier address.\"}},\"verificationConfigV2Exists(bytes32)\":{\"params\":{\"configId\":\"The configuration identifier\"},\"returns\":{\"exists\":\"Whether the config exists\"}},\"verify(bytes,bytes)\":{\"params\":{\"baseVerificationInput\":\"The base verification input data\",\"userContextData\":\"The user context data\"}}},\"title\":\"IIdentityVerificationHubV2\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"batchUpdateDscCircuitVerifiers(bytes32[],uint256[],address[])\":{\"notice\":\"Batch updates DSC circuit verifiers.\"},\"batchUpdateRegisterCircuitVerifiers(bytes32[],uint256[],address[])\":{\"notice\":\"Batch updates register circuit verifiers.\"},\"discloseVerifier(bytes32)\":{\"notice\":\"Returns the disclose verifier address for a given attestation ID.\"},\"dscCircuitVerifiers(bytes32,uint256)\":{\"notice\":\"Returns the DSC circuit verifier address for a given attestation ID and type ID.\"},\"generateConfigId((bool,uint256,bool,uint256[4],bool[3]))\":{\"notice\":\"Generates a config ID from a verification config\"},\"getIdentityCommitmentMerkleRoot(bytes32)\":{\"notice\":\"Returns the identity commitment merkle root for a given attestation ID.\"},\"registerCircuitVerifiers(bytes32,uint256)\":{\"notice\":\"Returns the register circuit verifier address for a given attestation ID and type ID.\"},\"registerCommitment(bytes32,uint256,(uint256[2],uint256[2][2],uint256[2],uint256[3]))\":{\"notice\":\"Registers a commitment using a register circuit proof.\"},\"registerDscKeyCommitment(bytes32,uint256,(uint256[2],uint256[2][2],uint256[2],uint256[2]))\":{\"notice\":\"Registers a DSC key commitment using a DSC circuit proof.\"},\"registry(bytes32)\":{\"notice\":\"Returns the registry address for a given attestation ID.\"},\"rootTimestamp(bytes32,uint256)\":{\"notice\":\"Returns the merkle root timestamp for a given attestation ID and root.\"},\"setVerificationConfigV2((bool,uint256,bool,uint256[4],bool[3]))\":{\"notice\":\"Sets verification config in V2 storage (owner only)\"},\"updateDscVerifier(bytes32,uint256,address)\":{\"notice\":\"Updates the DSC circuit verifier for a specific signature type.\"},\"updateRegisterCircuitVerifier(bytes32,uint256,address)\":{\"notice\":\"Updates the register circuit verifier for a specific signature type.\"},\"updateRegistry(bytes32,address)\":{\"notice\":\"Updates the registry address.\"},\"updateVcAndDiscloseCircuit(bytes32,address)\":{\"notice\":\"Updates the VC and Disclose circuit verifier address.\"},\"verificationConfigV2Exists(bytes32)\":{\"notice\":\"Checks if a verification config exists\"},\"verify(bytes,bytes)\":{\"notice\":\"Main verification function with new structured input format\"}},\"notice\":\"Interface for the Identity Verification Hub V2 for verifying zero-knowledge proofs.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"lib/self/contracts/contracts/interfaces/IIdentityVerificationHubV2.sol\":\"IIdentityVerificationHubV2\"},\"evmVersion\":\"prague\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/\",\":@selfxyz/contracts/=lib/self/contracts/\",\":erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":halmos-cheatcodes/=lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":self/=lib/self/\"],\"viaIR\":true},\"sources\":{\"lib/self/contracts/contracts/interfaces/IDscCircuitVerifier.sol\":{\"keccak256\":\"0x3fe45bb4dfaa288399ac7f2a2f3a096954620dc6da667e1a561e14544f338d1b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://dcef8babd319e9f8c4bf9bb3d3a9a26e354930a8c9770108aee4b90a7d7ee5c7\",\"dweb:/ipfs/QmPjuwyui7NS2HcaYYY5ETXBstVv48pD1ofdBwGawrXKcg\"]},\"lib/self/contracts/contracts/interfaces/IIdentityVerificationHubV2.sol\":{\"keccak256\":\"0x29364427abebd67d3574083e9be92d650471562e60ffbcfdb2c39bc529a26f21\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f7a1f076ac83f1eb6c19ea932827b604d16436b9317290eef2e36f46f8c1677c\",\"dweb:/ipfs/QmcEwf4kirokU4pWZAnJmxLfWXnVeBbs2EMkMZCffD6eGt\"]},\"lib/self/contracts/contracts/interfaces/IRegisterCircuitVerifier.sol\":{\"keccak256\":\"0x79cc50c0de8294f79811e2a878fe07a3f4ac83ed135a10af8c974a89615b7f3b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c5f3b3e5ec9dbbcd0a15621a33abb363875d1ecf3e46fb2d8371cc332d0f5992\",\"dweb:/ipfs/Qmb15d6ktr9tMiw9o3p79Cugws549MZArS5DCUsvTDkpTn\"]},\"lib/self/contracts/contracts/libraries/SelfStructs.sol\":{\"keccak256\":\"0x97dfa385760cf967586b0e39ec7c00475649946d5983950c12923a8298f4e0f7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://d5e695bd0636948177b4e851066435b59c2f6d6a95ca43f289f16047b8f5fcca\",\"dweb:/ipfs/QmaLKxhF8FPwbekjTzv515u8EfYHcqDMoNeFRrAiSUfrq7\"]}},\"version\":1}","metadata":{"compiler":{"version":"0.8.28+commit.7893614a"},"language":"Solidity","output":{"abi":[{"inputs":[{"internalType":"bytes32[]","name":"attestationIds","type":"bytes32[]"},{"internalType":"uint256[]","name":"typeIds","type":"uint256[]"},{"internalType":"address[]","name":"verifierAddresses","type":"address[]"}],"stateMutability":"nonpayable","type":"function","name":"batchUpdateDscCircuitVerifiers"},{"inputs":[{"internalType":"bytes32[]","name":"attestationIds","type":"bytes32[]"},{"internalType":"uint256[]","name":"typeIds","type":"uint256[]"},{"internalType":"address[]","name":"verifierAddresses","type":"address[]"}],"stateMutability":"nonpayable","type":"function","name":"batchUpdateRegisterCircuitVerifiers"},{"inputs":[{"internalType":"bytes32","name":"attestationId","type":"bytes32"}],"stateMutability":"view","type":"function","name":"discloseVerifier","outputs":[{"internalType":"address","name":"","type":"address"}]},{"inputs":[{"internalType":"bytes32","name":"attestationId","type":"bytes32"},{"internalType":"uint256","name":"typeId","type":"uint256"}],"stateMutability":"view","type":"function","name":"dscCircuitVerifiers","outputs":[{"internalType":"address","name":"","type":"address"}]},{"inputs":[{"internalType":"struct SelfStructs.VerificationConfigV2","name":"config","type":"tuple","components":[{"internalType":"bool","name":"olderThanEnabled","type":"bool"},{"internalType":"uint256","name":"olderThan","type":"uint256"},{"internalType":"bool","name":"forbiddenCountriesEnabled","type":"bool"},{"internalType":"uint256[4]","name":"forbiddenCountriesListPacked","type":"uint256[4]"},{"internalType":"bool[3]","name":"ofacEnabled","type":"bool[3]"}]}],"stateMutability":"pure","type":"function","name":"generateConfigId","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}]},{"inputs":[{"internalType":"bytes32","name":"attestationId","type":"bytes32"}],"stateMutability":"view","type":"function","name":"getIdentityCommitmentMerkleRoot","outputs":[{"internalType":"uint256","name":"","type":"uint256"}]},{"inputs":[{"internalType":"bytes32","name":"attestationId","type":"bytes32"},{"internalType":"uint256","name":"typeId","type":"uint256"}],"stateMutability":"view","type":"function","name":"registerCircuitVerifiers","outputs":[{"internalType":"address","name":"","type":"address"}]},{"inputs":[{"internalType":"bytes32","name":"attestationId","type":"bytes32"},{"internalType":"uint256","name":"registerCircuitVerifierId","type":"uint256"},{"internalType":"struct IRegisterCircuitVerifier.RegisterCircuitProof","name":"registerCircuitProof","type":"tuple","components":[{"internalType":"uint256[2]","name":"a","type":"uint256[2]"},{"internalType":"uint256[2][2]","name":"b","type":"uint256[2][2]"},{"internalType":"uint256[2]","name":"c","type":"uint256[2]"},{"internalType":"uint256[3]","name":"pubSignals","type":"uint256[3]"}]}],"stateMutability":"nonpayable","type":"function","name":"registerCommitment"},{"inputs":[{"internalType":"bytes32","name":"attestationId","type":"bytes32"},{"internalType":"uint256","name":"dscCircuitVerifierId","type":"uint256"},{"internalType":"struct IDscCircuitVerifier.DscCircuitProof","name":"dscCircuitProof","type":"tuple","components":[{"internalType":"uint256[2]","name":"a","type":"uint256[2]"},{"internalType":"uint256[2][2]","name":"b","type":"uint256[2][2]"},{"internalType":"uint256[2]","name":"c","type":"uint256[2]"},{"internalType":"uint256[2]","name":"pubSignals","type":"uint256[2]"}]}],"stateMutability":"nonpayable","type":"function","name":"registerDscKeyCommitment"},{"inputs":[{"internalType":"bytes32","name":"attestationId","type":"bytes32"}],"stateMutability":"view","type":"function","name":"registry","outputs":[{"internalType":"address","name":"","type":"address"}]},{"inputs":[{"internalType":"bytes32","name":"attestationId","type":"bytes32"},{"internalType":"uint256","name":"root","type":"uint256"}],"stateMutability":"view","type":"function","name":"rootTimestamp","outputs":[{"internalType":"uint256","name":"","type":"uint256"}]},{"inputs":[{"internalType":"struct SelfStructs.VerificationConfigV2","name":"config","type":"tuple","components":[{"internalType":"bool","name":"olderThanEnabled","type":"bool"},{"internalType":"uint256","name":"olderThan","type":"uint256"},{"internalType":"bool","name":"forbiddenCountriesEnabled","type":"bool"},{"internalType":"uint256[4]","name":"forbiddenCountriesListPacked","type":"uint256[4]"},{"internalType":"bool[3]","name":"ofacEnabled","type":"bool[3]"}]}],"stateMutability":"nonpayable","type":"function","name":"setVerificationConfigV2","outputs":[{"internalType":"bytes32","name":"configId","type":"bytes32"}]},{"inputs":[{"internalType":"bytes32","name":"attestationId","type":"bytes32"},{"internalType":"uint256","name":"typeId","type":"uint256"},{"internalType":"address","name":"verifierAddress","type":"address"}],"stateMutability":"nonpayable","type":"function","name":"updateDscVerifier"},{"inputs":[{"internalType":"bytes32","name":"attestationId","type":"bytes32"},{"internalType":"uint256","name":"typeId","type":"uint256"},{"internalType":"address","name":"verifierAddress","type":"address"}],"stateMutability":"nonpayable","type":"function","name":"updateRegisterCircuitVerifier"},{"inputs":[{"internalType":"bytes32","name":"attestationId","type":"bytes32"},{"internalType":"address","name":"registryAddress","type":"address"}],"stateMutability":"nonpayable","type":"function","name":"updateRegistry"},{"inputs":[{"internalType":"bytes32","name":"attestationId","type":"bytes32"},{"internalType":"address","name":"vcAndDiscloseCircuitVerifierAddress","type":"address"}],"stateMutability":"nonpayable","type":"function","name":"updateVcAndDiscloseCircuit"},{"inputs":[{"internalType":"bytes32","name":"configId","type":"bytes32"}],"stateMutability":"view","type":"function","name":"verificationConfigV2Exists","outputs":[{"internalType":"bool","name":"exists","type":"bool"}]},{"inputs":[{"internalType":"bytes","name":"baseVerificationInput","type":"bytes"},{"internalType":"bytes","name":"userContextData","type":"bytes"}],"stateMutability":"nonpayable","type":"function","name":"verify"}],"devdoc":{"kind":"dev","methods":{"batchUpdateDscCircuitVerifiers(bytes32[],uint256[],address[])":{"params":{"attestationIds":"An array of attestation identifiers.","typeIds":"An array of signature type identifiers.","verifierAddresses":"An array of new DSC circuit verifier addresses."}},"batchUpdateRegisterCircuitVerifiers(bytes32[],uint256[],address[])":{"params":{"attestationIds":"An array of attestation identifiers.","typeIds":"An array of signature type identifiers.","verifierAddresses":"An array of new register circuit verifier addresses."}},"discloseVerifier(bytes32)":{"params":{"attestationId":"The attestation ID to query."},"returns":{"_0":"The disclose verifier address associated with the attestation ID."}},"dscCircuitVerifiers(bytes32,uint256)":{"params":{"attestationId":"The attestation ID to query.","typeId":"The type ID to query."},"returns":{"_0":"The DSC circuit verifier address associated with the attestation ID and type ID."}},"generateConfigId((bool,uint256,bool,uint256[4],bool[3]))":{"params":{"config":"The verification configuration"},"returns":{"_0":"The generated config ID (sha256 hash of encoded config)"}},"getIdentityCommitmentMerkleRoot(bytes32)":{"params":{"attestationId":"The attestation ID to query."},"returns":{"_0":"The identity commitment merkle root associated with the attestation ID."}},"registerCircuitVerifiers(bytes32,uint256)":{"params":{"attestationId":"The attestation ID to query.","typeId":"The type ID to query."},"returns":{"_0":"The register circuit verifier address associated with the attestation ID and type ID."}},"registerCommitment(bytes32,uint256,(uint256[2],uint256[2][2],uint256[2],uint256[3]))":{"details":"Verifies the register circuit proof and then calls the Identity Registry to register the commitment.","params":{"attestationId":"The attestation ID.","registerCircuitProof":"The register circuit proof data.","registerCircuitVerifierId":"The identifier for the register circuit verifier to use."}},"registerDscKeyCommitment(bytes32,uint256,(uint256[2],uint256[2][2],uint256[2],uint256[2]))":{"details":"Verifies the DSC proof and then calls the Identity Registry to register the dsc key commitment.","params":{"attestationId":"The attestation ID.","dscCircuitProof":"The DSC circuit proof data.","dscCircuitVerifierId":"The identifier for the DSC circuit verifier to use."}},"registry(bytes32)":{"params":{"attestationId":"The attestation ID to query."},"returns":{"_0":"The registry address associated with the attestation ID."}},"rootTimestamp(bytes32,uint256)":{"params":{"attestationId":"The attestation ID to query.","root":"The merkle root to query."},"returns":{"_0":"The merkle root timestamp associated with the attestation ID and root."}},"setVerificationConfigV2((bool,uint256,bool,uint256[4],bool[3]))":{"details":"The configId is automatically generated from the config content using sha256(abi.encode(config))","params":{"config":"The verification configuration"},"returns":{"configId":"The generated config ID"}},"updateDscVerifier(bytes32,uint256,address)":{"params":{"attestationId":"The attestation identifier.","typeId":"The signature type identifier.","verifierAddress":"The new DSC circuit verifier address."}},"updateRegisterCircuitVerifier(bytes32,uint256,address)":{"params":{"attestationId":"The attestation identifier.","typeId":"The signature type identifier.","verifierAddress":"The new register circuit verifier address."}},"updateRegistry(bytes32,address)":{"params":{"attestationId":"The attestation ID.","registryAddress":"The new registry address."}},"updateVcAndDiscloseCircuit(bytes32,address)":{"params":{"attestationId":"The attestation ID.","vcAndDiscloseCircuitVerifierAddress":"The new VC and Disclose circuit verifier address."}},"verificationConfigV2Exists(bytes32)":{"params":{"configId":"The configuration identifier"},"returns":{"exists":"Whether the config exists"}},"verify(bytes,bytes)":{"params":{"baseVerificationInput":"The base verification input data","userContextData":"The user context data"}}},"version":1},"userdoc":{"kind":"user","methods":{"batchUpdateDscCircuitVerifiers(bytes32[],uint256[],address[])":{"notice":"Batch updates DSC circuit verifiers."},"batchUpdateRegisterCircuitVerifiers(bytes32[],uint256[],address[])":{"notice":"Batch updates register circuit verifiers."},"discloseVerifier(bytes32)":{"notice":"Returns the disclose verifier address for a given attestation ID."},"dscCircuitVerifiers(bytes32,uint256)":{"notice":"Returns the DSC circuit verifier address for a given attestation ID and type ID."},"generateConfigId((bool,uint256,bool,uint256[4],bool[3]))":{"notice":"Generates a config ID from a verification config"},"getIdentityCommitmentMerkleRoot(bytes32)":{"notice":"Returns the identity commitment merkle root for a given attestation ID."},"registerCircuitVerifiers(bytes32,uint256)":{"notice":"Returns the register circuit verifier address for a given attestation ID and type ID."},"registerCommitment(bytes32,uint256,(uint256[2],uint256[2][2],uint256[2],uint256[3]))":{"notice":"Registers a commitment using a register circuit proof."},"registerDscKeyCommitment(bytes32,uint256,(uint256[2],uint256[2][2],uint256[2],uint256[2]))":{"notice":"Registers a DSC key commitment using a DSC circuit proof."},"registry(bytes32)":{"notice":"Returns the registry address for a given attestation ID."},"rootTimestamp(bytes32,uint256)":{"notice":"Returns the merkle root timestamp for a given attestation ID and root."},"setVerificationConfigV2((bool,uint256,bool,uint256[4],bool[3]))":{"notice":"Sets verification config in V2 storage (owner only)"},"updateDscVerifier(bytes32,uint256,address)":{"notice":"Updates the DSC circuit verifier for a specific signature type."},"updateRegisterCircuitVerifier(bytes32,uint256,address)":{"notice":"Updates the register circuit verifier for a specific signature type."},"updateRegistry(bytes32,address)":{"notice":"Updates the registry address."},"updateVcAndDiscloseCircuit(bytes32,address)":{"notice":"Updates the VC and Disclose circuit verifier address."},"verificationConfigV2Exists(bytes32)":{"notice":"Checks if a verification config exists"},"verify(bytes,bytes)":{"notice":"Main verification function with new structured input format"}},"version":1}},"settings":{"remappings":["@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/","@selfxyz/contracts/=lib/self/contracts/","erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/","forge-std/=lib/forge-std/src/","halmos-cheatcodes/=lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/","openzeppelin-contracts/=lib/openzeppelin-contracts/","self/=lib/self/"],"optimizer":{"enabled":true,"runs":200},"metadata":{"bytecodeHash":"ipfs"},"compilationTarget":{"lib/self/contracts/contracts/interfaces/IIdentityVerificationHubV2.sol":"IIdentityVerificationHubV2"},"evmVersion":"prague","libraries":{},"viaIR":true},"sources":{"lib/self/contracts/contracts/interfaces/IDscCircuitVerifier.sol":{"keccak256":"0x3fe45bb4dfaa288399ac7f2a2f3a096954620dc6da667e1a561e14544f338d1b","urls":["bzz-raw://dcef8babd319e9f8c4bf9bb3d3a9a26e354930a8c9770108aee4b90a7d7ee5c7","dweb:/ipfs/QmPjuwyui7NS2HcaYYY5ETXBstVv48pD1ofdBwGawrXKcg"],"license":"MIT"},"lib/self/contracts/contracts/interfaces/IIdentityVerificationHubV2.sol":{"keccak256":"0x29364427abebd67d3574083e9be92d650471562e60ffbcfdb2c39bc529a26f21","urls":["bzz-raw://f7a1f076ac83f1eb6c19ea932827b604d16436b9317290eef2e36f46f8c1677c","dweb:/ipfs/QmcEwf4kirokU4pWZAnJmxLfWXnVeBbs2EMkMZCffD6eGt"],"license":"MIT"},"lib/self/contracts/contracts/interfaces/IRegisterCircuitVerifier.sol":{"keccak256":"0x79cc50c0de8294f79811e2a878fe07a3f4ac83ed135a10af8c974a89615b7f3b","urls":["bzz-raw://c5f3b3e5ec9dbbcd0a15621a33abb363875d1ecf3e46fb2d8371cc332d0f5992","dweb:/ipfs/Qmb15d6ktr9tMiw9o3p79Cugws549MZArS5DCUsvTDkpTn"],"license":"MIT"},"lib/self/contracts/contracts/libraries/SelfStructs.sol":{"keccak256":"0x97dfa385760cf967586b0e39ec7c00475649946d5983950c12923a8298f4e0f7","urls":["bzz-raw://d5e695bd0636948177b4e851066435b59c2f6d6a95ca43f289f16047b8f5fcca","dweb:/ipfs/QmaLKxhF8FPwbekjTzv515u8EfYHcqDMoNeFRrAiSUfrq7"],"license":"MIT"}},"version":1},"id":7}